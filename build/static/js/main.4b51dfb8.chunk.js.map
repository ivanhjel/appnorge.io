{"version":3,"sources":["components/Link/index.js","components/Link/Link.js","components/Title/index.js","components/Title/Title.js","config/constants.js","components/FrontPage/index.js","components/FrontPage/FrontPage.js","components/App/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Link","props","react_default","a","createElement","className","href","url","rel","children","Title","constants","FrontPage","components_Title","components_Link","Component","App","components_FrontPage","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAEeA,SCEF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBC,KAAML,EAAMM,IAAKC,IAAI,uBAC/CP,EAAMQ,aCLEC,SCCD,SAAAT,GACZ,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMQ,YCJvBE,EAEX,4JCAWC,0LCMX,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAACS,EAAD,sBAEEX,EAAAC,EAAAC,cAAA,WAFF,eAIAF,EAAAC,EAAAC,cAACU,EAAD,CAAMP,IAAKI,GAAX,qBATcI,cCJTC,0LCIX,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACa,EAAD,cAJUF,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4b51dfb8.chunk.js","sourcesContent":["import Link from \"./Link\";\r\n\r\nexport default Link;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Link.scss\";\r\n\r\nconst Link = props => (\r\n  <div className=\"link\">\r\n    <a className=\"link__content\" href={props.url} rel=\"noreferrer nofollow\">\r\n      {props.children}\r\n    </a>\r\n  </div>\r\n);\r\n\r\nLink.propTypes = {\r\n  url: PropTypes.string\r\n};\r\n\r\nexport default Link;\r\n","import Title from \"./Title\";\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport './Title.scss';\r\n\r\nconst Title = props => {\r\n  return <h1 className=\"title\">{props.children}</h1>;\r\n};\r\n\r\nexport default Title;\r\n","export default {\r\n  inviteURL:\r\n    \"https://appnorge.slack.com/join/shared_invite/enQtNjM5MDk5MDA1NzE5LTQ2MzlmNmY2YzAyOWFiMDNiMzUxYTY0MGEyYWI2MTE3MDBkMTVjMGZhYmQzYmRkZWRjYTZjMGE5ZjM0ZmM2YjE\"\r\n};\r\n","import FrontPage from \"./FrontPage\";\r\n\r\nexport default FrontPage;\r\n","import Link from \"components/Link\";\nimport Title from \"components/Title\";\nimport constants from \"config/constants\";\nimport React, { Component } from \"react\";\nimport \"./FrontPage.scss\";\n\nclass FrontPage extends Component {\n  render() {\n    return (\n      <div className=\"front-page\">\n        <div className=\"front-page__content\">\n          <Title>\n            Hele App Norge\n            <br />i en Slack!\n          </Title>\n          <Link url={constants.inviteURL}>Bli med!</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FrontPage;\n","import App from \"./App\";\r\n\r\nexport default App;\r\n","import FrontPage from \"components/FrontPage\";\nimport React, { Component } from \"react\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <FrontPage />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles/styles.scss\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}